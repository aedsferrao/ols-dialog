package no.uib.olsdialog.example;

import com.jgoodies.looks.plastic.PlasticLookAndFeel;
import com.jgoodies.looks.plastic.PlasticXPLookAndFeel;
import com.jgoodies.looks.plastic.theme.SkyKrupp;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import no.uib.olsdialog.OLSDialog;
import no.uib.olsdialog.OLSInputable;

/**
 * An example of how the OLS Dialog can be used.
 *
 * @author  Harald Barsnes
 */
public class OLS_Example extends javax.swing.JFrame implements OLSInputable {

    /** Creates new form OLS_Example */
    public OLS_Example() {
        initComponents();
        processingMethodsJTable.getColumn(" ").setMaxWidth(40);
        processingMethodsJTable.getColumn(" ").setMinWidth(40);
        setLocationRelativeTo(null);
    }

    /**
     * Sets the look and feel of the OLS Dialog.
     * Note that the OLS Dialog has been created with the following look and feel
     * in mind. If using a different look and feel you might need to tweak the GUI
     * to get the best appearance.
     */
    private static void setLookAndFeel() {
        try {
            PlasticLookAndFeel.setPlasticTheme(new SkyKrupp());
            UIManager.setLookAndFeel(new PlasticXPLookAndFeel());
        } catch (UnsupportedLookAndFeelException e) {
            // ignore exception, i.e. use default look and feel
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        processingMethodsPopupJMenu = new javax.swing.JPopupMenu();
        processingMethodsEditJMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        processingMethodsDeleteSelectedRowJMenuItem = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        instrumentDetectorJTextField = new javax.swing.JTextField();
        instrumentSourceJTextField = new javax.swing.JTextField();
        instrumentSourceJButton = new javax.swing.JButton();
        instrumentDetectorJButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        processingMethodsJTable = new javax.swing.JTable();
        processingMethodsJButton = new javax.swing.JButton();
        closeJButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        modificationMassJTextField = new javax.swing.JTextField();
        modificationMassJButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        modificationAccuracyJTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        modificationJTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        modificationNameJTextField = new javax.swing.JTextField();

        processingMethodsEditJMenuItem.setMnemonic('E');
        processingMethodsEditJMenuItem.setText("Edit");
        processingMethodsEditJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processingMethodsEditJMenuItemActionPerformed(evt);
            }
        });
        processingMethodsPopupJMenu.add(processingMethodsEditJMenuItem);
        processingMethodsPopupJMenu.add(jSeparator4);

        processingMethodsDeleteSelectedRowJMenuItem.setText("Delete");
        processingMethodsDeleteSelectedRowJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processingMethodsDeleteSelectedRowJMenuItemActionPerformed(evt);
            }
        });
        processingMethodsPopupJMenu.add(processingMethodsDeleteSelectedRowJMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OLS Dialog - Usage Example");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().
            getResource("/no/uib/olsdialog/icons/ols_transparent_small.GIF")));

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Example Using Text Fields", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0))); // NOI18N

    jLabel9.setText("Source:");

    jLabel12.setText("Detector:");

    instrumentDetectorJTextField.setEditable(false);
    instrumentDetectorJTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

    instrumentSourceJTextField.setEditable(false);
    instrumentSourceJTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

    instrumentSourceJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/no/uib/olsdialog/icons/ols_transparent.GIF"))); // NOI18N
    instrumentSourceJButton.setToolTipText("Ontology Lookup Service");
    instrumentSourceJButton.setPreferredSize(new java.awt.Dimension(61, 23));
    instrumentSourceJButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            instrumentSourceJButtonActionPerformed(evt);
        }
    });

    instrumentDetectorJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/no/uib/olsdialog/icons/ols_transparent.GIF"))); // NOI18N
    instrumentDetectorJButton.setToolTipText("Ontology Lookup Service");
    instrumentDetectorJButton.setPreferredSize(new java.awt.Dimension(61, 23));
    instrumentDetectorJButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            instrumentDetectorJButtonActionPerformed(evt);
        }
    });

    org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jLabel9)
                .add(jLabel12))
            .add(9, 9, 9)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                    .add(instrumentDetectorJTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(instrumentDetectorJButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                    .add(instrumentSourceJTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(instrumentSourceJButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel1Layout.createSequentialGroup()
                    .add(2, 2, 2)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel9)
                        .add(instrumentSourceJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(instrumentSourceJButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12)
                    .add(instrumentDetectorJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(instrumentDetectorJButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Example Using Tables", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0))); // NOI18N

    jLabel2.setText("Processing Methods:");

    processingMethodsJTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            " ", "CV Terms", "Value"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.Integer.class, java.lang.String.class, java.lang.String.class
        };
        boolean[] canEdit = new boolean [] {
            false, false, true
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    processingMethodsJTable.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            processingMethodsJTableKeyReleased(evt);
        }
    });
    processingMethodsJTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            processingMethodsJTableMouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(processingMethodsJTable);

    processingMethodsJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/no/uib/olsdialog/icons/ols_transparent.GIF"))); // NOI18N
    processingMethodsJButton.setText("Add Processing Method");
    processingMethodsJButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
    processingMethodsJButton.setPreferredSize(new java.awt.Dimension(177, 23));
    processingMethodsJButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            processingMethodsJButtonActionPerformed(evt);
        }
    });

    org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                .add(org.jdesktop.layout.GroupLayout.LEADING, processingMethodsJButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
                .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel2)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE))
            .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel2Layout.createSequentialGroup()
            .add(jLabel2)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(processingMethodsJButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    closeJButton.setText("Close");
    closeJButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            closeJButtonActionPerformed(evt);
        }
    });

    jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Example Using PSI-MOD", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0))); // NOI18N

    jLabel1.setText("Mass:");

    modificationMassJTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    modificationMassJTextField.setText("15.994915");

    modificationMassJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/no/uib/olsdialog/icons/ols_transparent.GIF"))); // NOI18N
    modificationMassJButton.setToolTipText("Ontology Lookup Service");
    modificationMassJButton.setPreferredSize(new java.awt.Dimension(61, 23));
    modificationMassJButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            modificationMassJButtonActionPerformed(evt);
        }
    });

    jLabel3.setText("+-");

    modificationAccuracyJTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    modificationAccuracyJTextField.setText("1.0");

    jLabel4.setText("PSI-MOD:");

    modificationJTextField.setEditable(false);
    modificationJTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

    jLabel5.setText("Name:");

    modificationNameJTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    modificationNameJTextField.setText("Oxidation");

    org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jLabel4)
                .add(jLabel1)
                .add(jLabel5))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel3Layout.createSequentialGroup()
                    .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, modificationNameJTextField)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3Layout.createSequentialGroup()
                            .add(modificationMassJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(jLabel3)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(modificationAccuracyJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 68, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(18, 18, 18)
                    .add(modificationMassJButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(modificationJTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE))
            .addContainerGap())
    );

    jPanel3Layout.linkSize(new java.awt.Component[] {modificationAccuracyJTextField, modificationMassJTextField}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel3Layout.createSequentialGroup()
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jLabel1)
                        .add(jPanel3Layout.createSequentialGroup()
                            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(modificationMassJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jLabel3)
                                .add(modificationAccuracyJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(modificationNameJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jLabel5)))))
                .add(jPanel3Layout.createSequentialGroup()
                    .add(21, 21, 21)
                    .add(modificationMassJButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .add(20, 20, 20)
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jLabel4)
                .add(modificationJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(12, Short.MAX_VALUE))
    );

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, closeJButton)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(18, 18, 18)
            .add(closeJButton)
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Opens the OLS dialog.
     *
     * @param evt
     */
    private void instrumentSourceJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instrumentSourceJButtonActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        String searchTerm = null;

        if (instrumentSourceJTextField.getText().length() > 0) {
            searchTerm = instrumentSourceJTextField.getText().substring(0, instrumentSourceJTextField.getText().indexOf("[") - 1);
            searchTerm = searchTerm.replaceAll("-", " ");
            searchTerm = searchTerm.replaceAll(":", " ");
            searchTerm = searchTerm.replaceAll("\\(", " ");
            searchTerm = searchTerm.replaceAll("\\)", " ");
            searchTerm = searchTerm.replaceAll("&", " ");
            searchTerm = searchTerm.replaceAll("\\+", " ");
            searchTerm = searchTerm.replaceAll("\\[", " ");
            searchTerm = searchTerm.replaceAll("\\]", " ");
        }

        new OLSDialog(this, this, true, "instrumentSource", "Mass Spectroscopy CV (PSI-MS) [PSI]", searchTerm);
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_instrumentSourceJButtonActionPerformed

    /**
     * Opens the OLS dialog.
     *
     * @param evt
     */
    private void instrumentDetectorJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instrumentDetectorJButtonActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        String searchTerm = null;

        if (instrumentDetectorJTextField.getText().length() > 0) {
            searchTerm = instrumentDetectorJTextField.getText().substring(
                    0, instrumentDetectorJTextField.getText().indexOf("[") - 1);
            searchTerm = searchTerm.replaceAll("-", " ");
            searchTerm = searchTerm.replaceAll(":", " ");
            searchTerm = searchTerm.replaceAll("\\(", " ");
            searchTerm = searchTerm.replaceAll("\\)", " ");
            searchTerm = searchTerm.replaceAll("&", " ");
            searchTerm = searchTerm.replaceAll("\\+", " ");
            searchTerm = searchTerm.replaceAll("\\[", " ");
            searchTerm = searchTerm.replaceAll("\\]", " ");
        }

        new OLSDialog(this, this, true, "instrumentDetector", "Mass Spectroscopy CV (PSI-MS) [PSI]", searchTerm);
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_instrumentDetectorJButtonActionPerformed

    /**
     * If the user double clicks on a row in the processing methods table the
     * OLS dialog is shown where the processing method can be
     * altered. If the user right clicks a pop up menu is shown for editing,
     * or delting the selected processing method.
     *
     * @param evt
     */
    private void processingMethodsJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_processingMethodsJTableMouseClicked
        if (evt.getButton() == 3) {

            int row = processingMethodsJTable.rowAtPoint(evt.getPoint());
            int column = processingMethodsJTable.columnAtPoint(evt.getPoint());

            processingMethodsJTable.changeSelection(row, column, false, false);

            processingMethodsPopupJMenu.show(evt.getComponent(), evt.getX(),
                    evt.getY());
        } else if (evt.getButton() == 1 && evt.getClickCount() == 2) {
            processingMethodsEditJMenuItemActionPerformed(null);
        }
}//GEN-LAST:event_processingMethodsJTableMouseClicked

    /**
     * If the delete key is pressed the selected rows in the processing methods
     * table is removed.
     *
     * @param evt
     */
    private void processingMethodsJTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_processingMethodsJTableKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            processingMethodsDeleteSelectedRowJMenuItemActionPerformed(null);
        }
}//GEN-LAST:event_processingMethodsJTableKeyReleased

    /**
     * Opens the OLS dialog.
     *
     * @param evt
     */
    private void processingMethodsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processingMethodsJButtonActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        new OLSDialog(this, this, true, "processingMethods", "Mass Spectroscopy CV (PSI-MS) [PSI]", null);
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_processingMethodsJButtonActionPerformed

    /**
     * Closes the example frame.
     *
     * @param evt
     */
    private void closeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeJButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_closeJButtonActionPerformed

    /**
     * Opens the OLS dialog.
     *
     * @param evt
     */
    private void processingMethodsEditJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processingMethodsEditJMenuItemActionPerformed

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        int selectedRow = processingMethodsJTable.getSelectedRow();

        String searchTerm = (String) processingMethodsJTable.getValueAt(selectedRow, 1);
        searchTerm = searchTerm.substring(0, searchTerm.indexOf("[") - 1);

        searchTerm = searchTerm.replaceAll("-", " ");
        searchTerm = searchTerm.replaceAll(":", " ");
        searchTerm = searchTerm.replaceAll("\\(", " ");
        searchTerm = searchTerm.replaceAll("\\)", " ");
        searchTerm = searchTerm.replaceAll("&", " ");
        searchTerm = searchTerm.replaceAll("\\+", " ");
        searchTerm = searchTerm.replaceAll("\\[", " ");
        searchTerm = searchTerm.replaceAll("\\]", " ");

        new OLSDialog(this, this, true, "processingMethods", "Mass Spectroscopy CV (PSI-MS) [PSI]", selectedRow, searchTerm);
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_processingMethodsEditJMenuItemActionPerformed

    /**
     * Deletes the selected row in the processing methods table.
     *
     * @param evt
     */
    private void processingMethodsDeleteSelectedRowJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processingMethodsDeleteSelectedRowJMenuItemActionPerformed

        int selectedRow = processingMethodsJTable.getSelectedRow();

        if (selectedRow != -1) {
            ((DefaultTableModel) processingMethodsJTable.getModel()).removeRow(selectedRow);
            fixProcessingMethodsIndices();
        }
}//GEN-LAST:event_processingMethodsDeleteSelectedRowJMenuItemActionPerformed

    /**
     * Opens the OLS dialog.
     *
     * @param evt
     */
    private void modificationMassJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificationMassJButtonActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        boolean error = false;
        Double currentModificationMass = 0.0;
        Double currentAccuracy = 1.0;

        try {
            currentModificationMass = new Double(modificationMassJTextField.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null,
                    "The mass is not a number!", "Modification Mass", JOptionPane.INFORMATION_MESSAGE);
            modificationMassJTextField.requestFocus();
            error = true;
        }

        if (!error) {
            try {
                currentAccuracy = new Double(modificationAccuracyJTextField.getText());

                if (currentAccuracy < 0) {
                    JOptionPane.showMessageDialog(null,
                            "The accuracy has to be a positive value.", "Mass Accuracy", JOptionPane.INFORMATION_MESSAGE);
                    modificationAccuracyJTextField.requestFocus();
                    error = true;
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null,
                        "The accuracy is not a number!", "Mass Accuracy", JOptionPane.INFORMATION_MESSAGE);
                modificationAccuracyJTextField.requestFocus();
                error = true;
            }
        }

        if (!error) {
            new OLSDialog(this, this, true, "modificationMass", "Protein Modifications (PSI-MOD) [MOD]", -1,
                    modificationNameJTextField.getText(), currentModificationMass, currentAccuracy, OLSDialog.OLS_DIALOG_MASS_SEARCH);
        }

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_modificationMassJButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        // Use this if the look and feel is not already set for your project.
        // Note that the OLS Dialog has been created to look good using the look and
        // feel used in this method. If you use a different look and feel, you might
        // have to tweak the GUI for it to get the best appearence.
        setLookAndFeel();

        // open the OLS Dialog usage example frame
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new OLS_Example().setVisible(true);
            }
        });
    }

    /**
     * Fixes the indices in the processing method table so that they are in
     * accending order starting from one
     */
    private void fixProcessingMethodsIndices() {
        for (int row = 0; row < ((DefaultTableModel) processingMethodsJTable.getModel()).getRowCount(); row++) {
            ((DefaultTableModel) processingMethodsJTable.getModel()).setValueAt(new Integer(row + 1), row, 0);
        }
    }

    /**
     * Insert a new modification.
     *
     * @param name
     * @param accession
     * @param ontology
     */
    public void setModification(String name, String accession, String ontology) {
        modificationJTextField.setText(name + " [" + accession + "]");
        modificationJTextField.setCaretPosition(0);
    }

    /**
     * Insert a new instrument source.
     *
     * @param name
     * @param accession
     * @param ontology
     */
    public void setInstrumentSource(String name, String accession, String ontology) {
        instrumentSourceJTextField.setText(name + " [" + accession + "]");
        instrumentSourceJTextField.setCaretPosition(0);
    }

    /**
     * Insert a new instrument detector
     *
     * @param name
     * @param accession
     * @param ontology
     */
    public void setInstrumentDetector(String name, String accession, String ontology) {
        instrumentDetectorJTextField.setText(name + " [" + accession + "]");
        instrumentDetectorJTextField.setCaretPosition(0);
    }

    /**
     * Instert a new processing method.
     *
     * @param name
     * @param accession
     * @param ontology
     * @param modifiedRow The row to modify, use -1 if adding a new processing method
     */
    public void addProcessingMethod(String name, String accession,
            String ontology, int modifiedRow) {
        addProcessingMethod(name, accession, ontology, null, modifiedRow);
    }

    /**
     * Instert a new processing method.
     *
     * @param name
     * @param accession
     * @param ontology
     * @param value
     * @param modifiedRow The row to modify, use -1 if adding a new processing method
     */
    public void addProcessingMethod(String name, String accession,
            String ontology, String value, int modifiedRow) {

        if (value != null) {
            if (value.equalsIgnoreCase("null")) {
                value = null;
            }
        }

        if (modifiedRow == -1) {

            ((DefaultTableModel) this.processingMethodsJTable.getModel()).addRow(
                    new Object[]{
                        new Integer(processingMethodsJTable.getRowCount() + 1),
                        name + " [" + accession + "]", value
                    });

        } else {
            processingMethodsJTable.setValueAt(name + " [" + accession + "]", modifiedRow, 1);
            processingMethodsJTable.setValueAt(null, modifiedRow, 2);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeJButton;
    private javax.swing.JButton instrumentDetectorJButton;
    private javax.swing.JTextField instrumentDetectorJTextField;
    private javax.swing.JButton instrumentSourceJButton;
    private javax.swing.JTextField instrumentSourceJTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTextField modificationAccuracyJTextField;
    private javax.swing.JTextField modificationJTextField;
    private javax.swing.JButton modificationMassJButton;
    private javax.swing.JTextField modificationMassJTextField;
    private javax.swing.JTextField modificationNameJTextField;
    private javax.swing.JMenuItem processingMethodsDeleteSelectedRowJMenuItem;
    private javax.swing.JMenuItem processingMethodsEditJMenuItem;
    private javax.swing.JButton processingMethodsJButton;
    private javax.swing.JTable processingMethodsJTable;
    private javax.swing.JPopupMenu processingMethodsPopupJMenu;
    // End of variables declaration//GEN-END:variables

    /**
     * See OLSInputable
     */
    public void insertOLSResult(String field, String selectedValue,
            String accession,
            String ontologyShort, String ontologyLong, int modifiedRow,
            String mappedTerm) {

        if (field.equalsIgnoreCase("instrumentSource")) {
            setInstrumentSource(selectedValue, accession, ontologyShort);
        } else if (field.equalsIgnoreCase("instrumentDetector")) {
            setInstrumentDetector(selectedValue, accession, ontologyShort);
        } else if (field.equalsIgnoreCase("processingMethods")) {
            addProcessingMethod(selectedValue, accession, ontologyShort, modifiedRow);
        } else if (field.equalsIgnoreCase("modificationMass")) {
            setModification(selectedValue, accession, ontologyShort);
        }
    }

    /**
     * See OLSInputable
     */
    public Window getWindow() {
        return (Window) this;
    }
}
